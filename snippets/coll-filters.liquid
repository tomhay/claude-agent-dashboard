{%- assign current_sort = collection.sort_by | default: collection.default_sort_by -%}

<div class="custcontainer">
  <div class="utility-bar" data-ajax-container data-ajax-scroll-to>
    <div class="utility-bar__left">
        <a href="#" class="toggle-btn utility-bar__item{% if section.settings.collapse_tag_sidebar_by_default == false %} toggle-btn--revealed-desktop{% endif %}{% if show_filters == false %} mobile-only{% endif %}" data-toggle-filters>
          <span class="button-icon">{% render 'svg-filter' %}</span>
          <span>Filter</span>
          {% liquid
            assign filter_count = 0
            for filter in collection.filters
              assign filter_count = filter_count | plus: filter.active_values.size
              if filter.type == 'price_range'
                if filter.min_value.value != nil or filter.max_value.value != nil
                  assign filter_count = filter_count | plus: 1
                endif
              endif
            endfor
          %}
          {% if filter_count > 0 %}
            <span class="toggle-btn__count">({{ filter_count }})</span>
          {% endif %}
          <span class="toggle-btn__chevron ltr-icon">{% render 'svg-chevron-right', stroke_width: 1.3 %}</span>
        </a>
    </div>
  
    {% comment %}<div class="utility-bar__right" style="display:none;">
      <span class="utility-bar__item desktop-only">
        <div class="link-dropdown link-dropdown--right-aligned">
          <div class="visually-hidden" id="sort-dropdown-heading">{{ 'collections.sorting.title' | t | escape }}</div>
          <button class="link-dropdown__button notabutton" aria-expanded="false" aria-controls="sort-dropdown-options" aria-describedby="sort-dropdown-heading">
            <span class="link-dropdown__button-text">
              {%- for option in collection.sort_options -%}
                {%- if current_sort == option.value -%}
                  {{ option.name | escape }}
                  {%- break -%}
                {%- endif -%}
              {%- endfor -%}
            </span>
            <span class="link-dropdown__button-icon">{% render 'svg-chevron-down', stroke_width: 1.3 %}</span>
          </button>
          <div class="link-dropdown__options" id="sort-dropdown-options">
            {%- for option in collection.sort_options -%}
              {%- if option.value != 'manual' or section.settings.coll_show_feat or collection.default_sort_by == 'manual' -%}
                <a href="{{ request.path | sort_by: option.value | escape }}" class="link-dropdown__link{% if current_sort == option.value %} link-dropdown__link--active{% endif %}">{{ option.name | escape }}</a>
              {%- endif -%}
            {%- endfor -%}
          </div>
        </div>
      </span>
    </div>{% endcomment %}
  </div>

  <div class="filter-container filter-container--side{% if section.settings.collapse_tag_sidebar_by_default == false %} filter-container--show-filters-desktop{% endif %}" data-ajax-container>
    {% render 'faceted-filters', tag_filter:tag_filter, filter_context: collection, clear_url: collection.url, current_sort: current_sort %}
  </div>
</div>
<script>
$('.toggle-btn').click(function(e) {
  e.preventDefault();
  
  $(this).toggleClass('toggle-btn--revealed-desktop');
  
  if($(this).parents('.custom-coll-filters').hasClass('open')) {
    $(this).parents('.custom-coll-filters').removeClass('open').addClass('closee');
  } else {
    $(this).parents('.custom-coll-filters').removeClass('closee').addClass('open');
  }
  
  if($(window).width() < 768 && $(this).parents('.custom-coll-filters').hasClass('open')) {
    $(this).parents('.custom-coll-filters').toggleClass('filter-container--show-filters-mobile');
  }
});
  
$('.filters__closee, .filter-shade').click(function(e) {
  e.preventDefault();
  
  $(this).parents('.custom-coll-filters').removeClass('open').addClass('closee');
});

$('.filter-group__heading').click(function(e) {
  e.preventDefault();
  
  if($(this).hasClass('toggle-target-toggler--is-hidden')) {
    
    $(this).siblings('.filter-group__items').slideUp();
    $(this).removeClass('toggle-target-toggler--is-hidden');
    
  } else {
    
    $('.filter-group__items').slideUp();
    $('.filter-group__heading').removeClass('toggle-target-toggler--is-hidden');
    $(this).siblings('.filter-group__items').slideToggle();
    $(this).toggleClass('toggle-target-toggler--is-hidden');
    
  }
});

$('.link-dropdown__button').click(function(evt) {
  evt.stopPropagation();
  
  let $btn = $(evt.currentTarget),
    
  doExpand = $btn.attr('aria-expanded') == 'false';
  $btn.attr('aria-expanded', doExpand);
  $btn.css('width', $btn.outerWidth() + 'px');
  
  let newWidth = null,
  $optsBox = $btn.next(),
  isLeftAligned = $btn.closest('.link-dropdown').hasClass('link-dropdown--left-aligned');
  
  if (!isLeftAligned) {
    if (doExpand) {
      newWidth = $optsBox.outerWidth();
      // rtl - could be either side
      if (document.querySelector('html[dir=rtl]')) {
        newWidth += parseInt($optsBox.css('left'));
      } else {
        newWidth += parseInt($optsBox.css('right'));
      }
      newWidth -= parseInt($optsBox.find('.link-dropdown__link:first').css('padding-inline-start'));
    } else {
      newWidth = parseInt($btn.css('padding-inline-end')) + $btn.find('.link-dropdown__button-text').width() + 1;
    }

    console.log(newWidth)
    setTimeout(function () {
      $btn.css('width', newWidth + 'px');
    }, 10);
  }
});

$('.link-dropdown__link').click(function(evt) {
  evt.preventDefault();

  let sortUrl= $(this).attr('href').split('?').pop();
  let filterForm = $('#CollectionFilterForm');
  
  loadForm(filterForm, sortUrl);
});

  
$('#CollectionFilterForm input').change(function(evt) {
  evt.preventDefault();
  
  //let sortUrl= $('#sort-dropdown-options .link-dropdown__link--active').attr('href').split('?').pop();
  let sortUrl= 'sort_by='+$("#sort-by option:selected").val();
  let queryVals = [];
  let filterForm = $(this).parents('form');

  loadForm(filterForm, sortUrl);
});

function loadForm(filterForm, sortUrl) {
  let queryVals = [];
  
  filterForm.find('input, select').each((index, input) => {
    if (
    (input.type !== 'checkbox' && input.type !== 'radio' || input.checked) && // is an active input value
    input.value !== '' // has a value
    ) {
        queryVals.push([input.name, encodeURIComponent(input.value)]);
      }
  });
  
  let newUrl = location.pathname;
  queryVals.forEach(value => {
    newUrl += "&".concat(value[0], "=").concat(value[1]);
  });
  newUrl = newUrl.replace('&', '?');
  
  if (newUrl.includes('?')) {
    newUrl += `&${sortUrl}`;
  } else {
    newUrl += `?${sortUrl}`;
  }
  
  location.href = newUrl;
}
</script>

<style>
  .filter-group--swatch-color .filter-group__item input{ display:none; }
  
  .filter-group--swatch-color .filter-group__item .filter-group__item__color{
    height: 23px;
    width: 23px;
    border-radius: 100%;
    display: block;
    cursor: pointer;
    border: 1px solid #ccc;
  }
  .filter-group--swatch-color .filter-group__item {
    display: flex;
    align-items: center;
  }
  .filter-group--swatch-color .filter-group__item .swatch-border {
    border:1px solid #fff;
    border-radius: 100%;
    padding:1px;
    display: flex;
    align-items: center;
    margin-right: 8px;
  }
  .filter-group--swatch-color .filter-group__item.filter-group__item--active .swatch-border{
    border:1px solid #000;
  }
  input.tag-filter__checkbox--regular {
    margin-right: 5px;
  }
  button.close.tag-filter__clear {
    margin-left: 15px;
  }
</style>