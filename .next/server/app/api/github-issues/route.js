"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/github-issues/route";
exports.ids = ["app/api/github-issues/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub-issues%2Froute&page=%2Fapi%2Fgithub-issues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub-issues%2Froute.ts&appDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub-issues%2Froute&page=%2Fapi%2Fgithub-issues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub-issues%2Froute.ts&appDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_User_Desktop_Claude_Agent_Dashboard_app_api_github_issues_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/github-issues/route.ts */ \"(rsc)/./app/api/github-issues/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/github-issues/route\",\n        pathname: \"/api/github-issues\",\n        filename: \"route\",\n        bundlePath: \"app/api/github-issues/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\User\\\\Desktop\\\\Claude-Agent-Dashboard\\\\app\\\\api\\\\github-issues\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_User_Desktop_Claude_Agent_Dashboard_app_api_github_issues_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/github-issues/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnaXRodWItaXNzdWVzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZnaXRodWItaXNzdWVzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZ2l0aHViLWlzc3VlcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNVc2VyJTVDRGVza3RvcCU1Q0NsYXVkZS1BZ2VudC1EYXNoYm9hcmQlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q1VzZXIlNUNEZXNrdG9wJTVDQ2xhdWRlLUFnZW50LURhc2hib2FyZCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDbUM7QUFDaEg7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGF1ZGUtYWdlbnQtZGFzaGJvYXJkLz9lM2YyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXFVzZXJcXFxcRGVza3RvcFxcXFxDbGF1ZGUtQWdlbnQtRGFzaGJvYXJkXFxcXGFwcFxcXFxhcGlcXFxcZ2l0aHViLWlzc3Vlc1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZ2l0aHViLWlzc3Vlcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dpdGh1Yi1pc3N1ZXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2dpdGh1Yi1pc3N1ZXMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxVc2VyXFxcXERlc2t0b3BcXFxcQ2xhdWRlLUFnZW50LURhc2hib2FyZFxcXFxhcHBcXFxcYXBpXFxcXGdpdGh1Yi1pc3N1ZXNcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2dpdGh1Yi1pc3N1ZXMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub-issues%2Froute&page=%2Fapi%2Fgithub-issues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub-issues%2Froute.ts&appDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/github-issues/route.ts":
/*!****************************************!*\
  !*** ./app/api/github-issues/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _octokit_rest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @octokit/rest */ \"(rsc)/./node_modules/@octokit/rest/dist-src/index.js\");\n\n\nconst octokit = new _octokit_rest__WEBPACK_IMPORTED_MODULE_1__.Octokit({\n    auth: process.env.GITHUB_TOKEN\n});\nasync function GET(req) {\n    try {\n        const { searchParams } = new URL(req.url);\n        const project = searchParams.get(\"project\");\n        // Project to GitHub repo mapping\n        const projectRepos = {\n            \"AIBL\": {\n                owner: \"BaliLove\",\n                repo: \"chat-langchain\"\n            },\n            \"BL2\": {\n                owner: \"BaliLove\",\n                repo: \"BaliLove_v2.0\"\n            },\n            \"Blxero\": {\n                owner: \"BaliLove\",\n                repo: \"x\"\n            },\n            \"Upify\": {\n                owner: \"tomhay\",\n                repo: \"upify\"\n            },\n            \"BaliLove\": {\n                owner: \"BaliLove\",\n                repo: \"balilove-website\"\n            }\n        };\n        let allIssues = [];\n        if (project && projectRepos[project]) {\n            // Get issues for specific project\n            const { owner, repo } = projectRepos[project];\n            const { data: issues } = await octokit.rest.issues.listForRepo({\n                owner,\n                repo,\n                state: \"open\",\n                sort: \"updated\",\n                direction: \"desc\",\n                per_page: 50\n            });\n            allIssues = issues.map((issue)=>({\n                    ...issue,\n                    project: project,\n                    repoName: repo\n                }));\n        } else {\n            // Get issues across all projects\n            const issuePromises = Object.entries(projectRepos).map(async ([projectName, { owner, repo }])=>{\n                try {\n                    const { data: issues } = await octokit.rest.issues.listForRepo({\n                        owner,\n                        repo,\n                        state: \"open\",\n                        sort: \"updated\",\n                        direction: \"desc\",\n                        per_page: 20\n                    });\n                    return issues.map((issue)=>({\n                            ...issue,\n                            project: projectName,\n                            repoName: repo\n                        }));\n                } catch (error) {\n                    console.error(`Failed to fetch issues for ${projectName}:`, error);\n                    return [];\n                }\n            });\n            const issueArrays = await Promise.all(issuePromises);\n            allIssues = issueArrays.flat();\n        }\n        // Transform issues for our dashboard with enhanced data\n        const transformedIssues = await Promise.all(allIssues.map(async (issue)=>{\n            const labels = issue.labels.map((label)=>label.name);\n            const complexity = estimateComplexity(issue.title, issue.body, labels);\n            const estimatedHours = getEstimatedHours(complexity, labels);\n            // Calculate basic time metrics\n            const now = new Date();\n            const created = new Date(issue.created_at);\n            const updated = new Date(issue.updated_at);\n            const daysSinceCreated = Math.floor((now.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));\n            const hoursSinceUpdate = Math.floor((now.getTime() - updated.getTime()) / (1000 * 60 * 60));\n            return {\n                id: issue.id,\n                number: issue.number,\n                title: issue.title,\n                body: issue.body,\n                project: issue.project,\n                repoName: issue.repoName,\n                labels,\n                assignee: issue.assignee?.login || null,\n                state: issue.state,\n                created_at: issue.created_at,\n                updated_at: issue.updated_at,\n                html_url: issue.html_url,\n                user: {\n                    login: issue.user.login,\n                    avatar_url: issue.user.avatar_url\n                },\n                stage: getWorkflowStage(labels),\n                assignedAgent: getAssignedAgent(labels),\n                // Enhanced productivity data (placeholder - will be populated by detailed API)\n                commits: [],\n                pullRequests: [],\n                complexity,\n                metrics: {\n                    estimatedHours,\n                    actualHours: daysSinceCreated * 2,\n                    timeInStage: {\n                        total: daysSinceCreated * 24,\n                        current: hoursSinceUpdate\n                    },\n                    blockedTime: calculateBlockedTime(labels, issue.events || []),\n                    reviewCycles: 0,\n                    commitVelocity: 0,\n                    lastActivity: issue.updated_at,\n                    progressScore: calculateBasicProgressScore(daysSinceCreated, labels),\n                    onTrackStatus: getBasicOnTrackStatus(daysSinceCreated, complexity, labels)\n                },\n                predictedCompletion: predictBasicCompletion(estimatedHours, daysSinceCreated)\n            };\n        }));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            issues: transformedIssues,\n            total: transformedIssues.length\n        });\n    } catch (error) {\n        console.error(\"Failed to fetch GitHub issues:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Helper function to determine workflow stage from labels\nfunction getWorkflowStage(labels) {\n    if (labels.includes(\"in-development\") || labels.includes(\"development\")) return \"development\";\n    if (labels.includes(\"in-review\") || labels.includes(\"review\")) return \"review\";\n    if (labels.includes(\"planning\") || labels.includes(\"needs-planning\")) return \"planning\";\n    if (labels.includes(\"ready-for-deployment\") || labels.includes(\"deploy\")) return \"deploy\";\n    return \"backlog\";\n}\n// Helper function to check if issue is assigned to an agent\nfunction getAssignedAgent(labels) {\n    const agentLabel = labels.find((label)=>label.startsWith(\"agent:\"));\n    return agentLabel ? agentLabel.replace(\"agent:\", \"\") : null;\n}\n// Helper function to estimate issue complexity\nfunction estimateComplexity(title, body, labels) {\n    let score = 0;\n    // Title analysis\n    if (title.length > 50) score += 1;\n    if (title.includes(\"refactor\") || title.includes(\"redesign\")) score += 2;\n    if (title.includes(\"fix\") || title.includes(\"bug\")) score -= 1;\n    // Body analysis  \n    if (body && body.length > 1000) score += 1;\n    if (body && (body.includes(\"multiple\") || body.includes(\"several\"))) score += 1;\n    if (body && (body.includes(\"database\") || body.includes(\"migration\"))) score += 2;\n    // Label analysis\n    if (labels.includes(\"enhancement\")) score += 1;\n    if (labels.includes(\"feature\")) score += 2;\n    if (labels.includes(\"bug\")) score -= 1;\n    if (labels.includes(\"documentation\")) score -= 1;\n    if (score <= 0) return \"simple\";\n    if (score <= 3) return \"medium\";\n    return \"complex\";\n}\n// Helper function to get estimated hours based on complexity\nfunction getEstimatedHours(complexity, labels) {\n    const baseHours = {\n        simple: 2,\n        medium: 8,\n        complex: 24\n    }[complexity] || 8;\n    // Adjust based on labels\n    let multiplier = 1;\n    if (labels.includes(\"urgent\")) multiplier *= 0.8;\n    if (labels.includes(\"research\")) multiplier *= 1.5;\n    if (labels.includes(\"testing\")) multiplier *= 1.2;\n    return Math.round(baseHours * multiplier);\n}\n// Helper function to calculate blocked time from labels/events\nfunction calculateBlockedTime(labels, events) {\n    // Check for blocked labels\n    const blockedLabels = labels.filter((label)=>label.toLowerCase().includes(\"blocked\") || label.toLowerCase().includes(\"waiting\"));\n    // Rough estimate: 24 hours for each blocked label\n    return blockedLabels.length * 24;\n}\n// Helper function to calculate basic progress score\nfunction calculateBasicProgressScore(daysSinceCreated, labels) {\n    let score = 50 // Base score\n    ;\n    // Penalize old issues\n    if (daysSinceCreated > 7) score -= 20;\n    if (daysSinceCreated > 14) score -= 30;\n    // Boost for progress indicators\n    if (labels.includes(\"in-progress\")) score += 20;\n    if (labels.includes(\"ready-for-review\")) score += 30;\n    if (labels.includes(\"blocked\")) score -= 40;\n    return Math.max(0, Math.min(100, score));\n}\n// Helper function to get basic on-track status\nfunction getBasicOnTrackStatus(daysSinceCreated, complexity, labels) {\n    const expectedDays = {\n        simple: 1,\n        medium: 3,\n        complex: 7\n    }[complexity] || 3;\n    if (labels.some((l)=>l.toLowerCase().includes(\"blocked\"))) return \"blocked\";\n    if (daysSinceCreated > expectedDays * 1.5) return \"behind\";\n    if (daysSinceCreated < expectedDays * 0.7) return \"ahead\";\n    return \"on-track\";\n}\n// Helper function to predict basic completion date\nfunction predictBasicCompletion(estimatedHours, daysSinceCreated) {\n    const hoursPerDay = 6 // Assume 6 productive hours per day\n    ;\n    const remainingDays = Math.ceil(estimatedHours / hoursPerDay);\n    const completionDate = new Date();\n    completionDate.setDate(completionDate.getDate() + remainingDays);\n    return completionDate.toISOString();\n}\nasync function POST(req) {\n    try {\n        const { action, issueId, projectName, agentId, labels } = await req.json();\n        if (action === \"assign-agent\") {\n            // Add agent label to issue\n            const projectRepos = {\n                \"AIBL\": {\n                    owner: \"BaliLove\",\n                    repo: \"chat-langchain\"\n                },\n                \"BL2\": {\n                    owner: \"BaliLove\",\n                    repo: \"BaliLove_v2.0\"\n                },\n                \"Blxero\": {\n                    owner: \"BaliLove\",\n                    repo: \"x\"\n                },\n                \"Upify\": {\n                    owner: \"tomhay\",\n                    repo: \"upify\"\n                },\n                \"BaliLove\": {\n                    owner: \"BaliLove\",\n                    repo: \"balilove-website\"\n                }\n            };\n            const repo = projectRepos[projectName];\n            if (!repo) {\n                throw new Error(\"Invalid project name\");\n            }\n            // Get current issue to find issue number\n            const { data: issues } = await octokit.rest.issues.listForRepo({\n                owner: repo.owner,\n                repo: repo.repo,\n                state: \"all\"\n            });\n            const issue = issues.find((i)=>i.id === issueId);\n            if (!issue) {\n                throw new Error(\"Issue not found\");\n            }\n            // Remove existing agent labels and add new one\n            const currentLabels = issue.labels.map((l)=>l.name);\n            const filteredLabels = currentLabels.filter((l)=>!l.startsWith(\"agent:\"));\n            const newLabels = [\n                ...filteredLabels,\n                `agent:${agentId}`,\n                \"in-development\"\n            ];\n            await octokit.rest.issues.update({\n                owner: repo.owner,\n                repo: repo.repo,\n                issue_number: issue.number,\n                labels: newLabels\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: \"Agent assigned successfully\"\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Invalid action\"\n        }, {\n            status: 400\n        });\n    } catch (error) {\n        console.error(\"Failed to update GitHub issue:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/github-issues/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@octokit","vendor-chunks/before-after-hook","vendor-chunks/universal-user-agent","vendor-chunks/fast-content-type-parse"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgithub-issues%2Froute&page=%2Fapi%2Fgithub-issues%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgithub-issues%2Froute.ts&appDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CUser%5CDesktop%5CClaude-Agent-Dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();